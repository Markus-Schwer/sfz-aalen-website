# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PagesDocument

type PagesMotto {
  mottoText: String
  color: String
  size: String
}

type PagesPageSectionsBigHeader {
  headerText: String
}

type PagesPageSectionsHeaderOnlySectionHeader {
  mainHeader: String
  subHeader: String
  divider: Boolean
}

type PagesPageSectionsHeaderOnlySection {
  header: PagesPageSectionsHeaderOnlySectionHeader!
}

type PagesPageSectionsTwoColumnSectionHeader {
  mainHeader: String
  subHeader: String
  divider: Boolean
}

type PagesPageSectionsTwoColumnSectionColumnsPicture {
  picture: String!
  altText: String
  width: Int!
  height: Int!
}

type PagesPageSectionsTwoColumnSectionColumnsParagraph {
  paragraph: String!
}

union PagesPageSectionsTwoColumnSectionColumns = PagesPageSectionsTwoColumnSectionColumnsPicture | PagesPageSectionsTwoColumnSectionColumnsParagraph

type PagesPageSectionsTwoColumnSection {
  header: PagesPageSectionsTwoColumnSectionHeader!
  backgroundColor: String
  columns: [PagesPageSectionsTwoColumnSectionColumns!]!
}

type PagesPageSectionsIconBubbleSectionBubbles {
  text: String
  icon: String
  backgroundColor: String!
  href: String
}

type PagesPageSectionsIconBubbleSection {
  numberColumns: Int
  bubbles: [PagesPageSectionsIconBubbleSectionBubbles!]!
}

union PagesPageSections = PagesPageSectionsBigHeader | PagesPageSectionsHeaderOnlySection | PagesPageSectionsTwoColumnSection | PagesPageSectionsIconBubbleSection

type Pages {
  breadcrumbs: [String]
  logoScrollEffect: Boolean
  coverImages: [String]
  motto: [PagesMotto]
  pageSections: [PagesPageSections]
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  pages: PagesMutation
}

input PagesMottoMutation {
  mottoText: String
  color: String
  size: String
}

input PagesPageSectionsBigHeaderMutation {
  headerText: String
}

input PagesPageSectionsHeaderOnlySectionHeaderMutation {
  mainHeader: String
  subHeader: String
  divider: Boolean
}

input PagesPageSectionsHeaderOnlySectionMutation {
  header: PagesPageSectionsHeaderOnlySectionHeaderMutation
}

input PagesPageSectionsTwoColumnSectionHeaderMutation {
  mainHeader: String
  subHeader: String
  divider: Boolean
}

input PagesPageSectionsTwoColumnSectionColumnsPictureMutation {
  picture: String
  altText: String
  width: Int
  height: Int
}

input PagesPageSectionsTwoColumnSectionColumnsParagraphMutation {
  paragraph: String
}

input PagesPageSectionsTwoColumnSectionColumnsMutation {
  picture: PagesPageSectionsTwoColumnSectionColumnsPictureMutation
  paragraph: PagesPageSectionsTwoColumnSectionColumnsParagraphMutation
}

input PagesPageSectionsTwoColumnSectionMutation {
  header: PagesPageSectionsTwoColumnSectionHeaderMutation
  backgroundColor: String
  columns: [PagesPageSectionsTwoColumnSectionColumnsMutation]
}

input PagesPageSectionsIconBubbleSectionBubblesMutation {
  text: String
  icon: String
  backgroundColor: String
  href: String
}

input PagesPageSectionsIconBubbleSectionMutation {
  numberColumns: Int
  bubbles: [PagesPageSectionsIconBubbleSectionBubblesMutation]
}

input PagesPageSectionsMutation {
  bigHeader: PagesPageSectionsBigHeaderMutation
  headerOnlySection: PagesPageSectionsHeaderOnlySectionMutation
  twoColumnSection: PagesPageSectionsTwoColumnSectionMutation
  iconBubbleSection: PagesPageSectionsIconBubbleSectionMutation
}

input PagesMutation {
  breadcrumbs: [String]
  logoScrollEffect: Boolean
  coverImages: [String]
  motto: [PagesMottoMutation]
  pageSections: [PagesPageSectionsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  